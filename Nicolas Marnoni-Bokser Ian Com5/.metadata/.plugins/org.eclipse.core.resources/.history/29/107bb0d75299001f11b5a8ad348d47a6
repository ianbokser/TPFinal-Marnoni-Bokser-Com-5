package tpFinal;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Aerolinea implements IAerolinea {
	private String nombre;
	private String CUIT;
	private Map<Integer, Cliente> clientes;
	private Map<String, Aeropuerto> aeropuertos;
	private Map<String, Vuelo> vuelos;
	private int contadorVuelosPublicos;
	private int contadorVuelosPrivados;
	private Map<String, Double> recaudacionPorDestino = new HashMap<>();

	
	
	public Aerolinea(String nombre, String CUIT) {
		this.nombre=nombre;
		this.CUIT=CUIT;
		this.clientes = new HashMap<>();
		this.aeropuertos = new HashMap<>();
		this.vuelos = new HashMap<>();
        this.contadorVuelosPublicos = 1;
	}

	@Override
	public void registrarCliente(int dni, String nombre, String telefono) {
		 if (clientes.containsKey(dni)) {
	            throw new IllegalArgumentException("El cliente con DNI " + dni + " ya está registrado.");
	        }
	     Cliente nuevoCliente = new Cliente(dni, nombre, telefono);
	     clientes.put(dni, nuevoCliente);
	     System.out.println("Cliente registrado exitosamente.");
	}

	@Override
	public void registrarAeropuerto(String nombre, String pais, String provincia, String direccion) {
		if (aeropuertos.containsKey(nombre)) {
            throw new IllegalArgumentException("El aeropuerto con nombre " + nombre + " ya está registrado.");
        }
		Aeropuerto nuevoAeropuerto = new Aeropuerto(nombre, pais, provincia, direccion);
		aeropuertos.put(nombre, nuevoAeropuerto);
		System.out.println("Aeropuerto registrado exitosamente.");
		
	}

	@Override
	public String registrarVueloPublicoNacional(String origen, String destino, String fecha, int tripulantes,
			double valorRefrigerio, double[] precios, int[] cantAsientos) {
		if (!aeropuertos.containsKey(origen) || !aeropuertos.containsKey(destino) ||
	            !aeropuertos.get(origen).getPais().equals("Argentina") || !aeropuertos.get(destino).getPais().equals("Argentina")) {
	        throw new IllegalArgumentException("Origen y destino deben ser aeropuertos en Argentina.");
	    }
	    if (precios.length != 2 || cantAsientos.length != 2) {
	        throw new IllegalArgumentException("Deben especificarse dos precios y dos cantidades de asientos.");
	    }
	    Date fechaVuelo;
	    SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
	    try {
	        fechaVuelo = formatoFecha.parse(fecha);
	    } catch (ParseException e) {
	        throw new IllegalArgumentException("Formato de fecha inválido. Use 'dd/MM/yyyy'.");
	    }

	    String codigoVuelo = contadorVuelosPublicos++ + "-PUB";
	    Vuelo vuelo = new VueloNacional(codigoVuelo, origen, destino, fechaVuelo, tripulantes, valorRefrigerio, precios, cantAsientos);
	    vuelos.put(codigoVuelo, vuelo);

	    return codigoVuelo;
	}

	@Override
	public String registrarVueloPublicoInternacional(String origen, String destino, String fecha, int tripulantes,
			double valorRefrigerio, int cantRefrigerios, double[] precios, int[] cantAsientos, String[] escalas) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String VenderVueloPrivado(String origen, String destino, String fecha, int tripulantes, double precio,
			int dniComprador, int[] acompaniantes) {
		if (!aeropuertos.containsKey(origen) || !aeropuertos.containsKey(destino)) {
	        throw new IllegalArgumentException("Origen o destino no válidos.");
	    }

		SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
	    Date fechaVuelo;
	    try {
	        fechaVuelo = formatoFecha.parse(fecha);
	    } catch (ParseException e) {
	        throw new IllegalArgumentException("Formato de fecha inválido. Use 'yyyy-MM-dd'.");
	    }

	    Date fechaActual = new Date();
	    if (fechaVuelo.before(fechaActual)) {
	        throw new IllegalArgumentException("La fecha del vuelo debe ser posterior a la fecha actual.");
	    }

	    int pasajerosTotales = 1 + acompaniantes.length; // Cliente + acompañantes
	    int jetsNecesarios = (int) Math.ceil((double) pasajerosTotales / tripulantes);
	    double totalPorVueloPrivado = precio * jetsNecesarios;

	    recaudacionPorDestino.put(destino, recaudacionPorDestino.getOrDefault(destino, 0.0) + totalPorVueloPrivado);

	    String codigoVuelo = contadorVuelosPrivados++ + "-PRI";
	    VueloPrivado vueloPrivado = new VueloPrivado(codigoVuelo, origen, destino, fechaVuelo, tripulantes, precio, jetsNecesarios);
	    vuelos.put(codigoVuelo, vueloPrivado);
	    
	    Cliente clienteComprador = clientes.get(dniComprador);
	    if (clienteComprador == null) {
	        throw new IllegalArgumentException("El cliente comprador no está registrado.");
	    }
	    clienteComprador.setCodigoVuelo(codigoVuelo);
	    
	    return codigoVuelo;
	}

	@Override
	public Map<Integer, String> asientosDisponibles(String codVuelo) {
	    Vuelo vuelo = vuelos.get(codVuelo);
	    if (vuelo == null) {
	        throw new IllegalArgumentException("Código de vuelo no válido.");
	    }
	    
	    Map<Integer, String> disponibilidad = new HashMap<>();
	    List<Integer> asientos = vuelo.consultarAsientosDisponibles();
	    
	    for (int asiento : asientos) {
	        disponibilidad.put(asiento, "Disponible");
	    }
	    
	    return disponibilidad;
	}

	@Override
	public int venderPasaje(int dni, String codVuelo, int nroAsiento, boolean aOcupar) {
	    Vuelo vuelo = vuelos.get(codVuelo);
	    if (vuelo == null) {
	        throw new IllegalArgumentException("Código de vuelo no válido.");
	    }
	    
	    Cliente cliente = clientes.get(dni);
	    if (cliente == null) {
	        throw new IllegalArgumentException("El cliente no está registrado.");
	    }
	    
	    if (!vuelo.consultarAsientosDisponibles().contains(nroAsiento)) {
	        throw new IllegalArgumentException("El asiento " + nroAsiento + " no está disponible.");
	    }
	    
	    double precioAsiento = vuelo.precioPorAsiento(nroAsiento);
	    double valorRefrigerio = vuelo.costoRefrigerio();
	    double totalPorPasaje = precioAsiento + (aOcupar ? valorRefrigerio : 0);

	    String destino = vuelo.getDestino();
	    recaudacionPorDestino.put(destino, recaudacionPorDestino.getOrDefault(destino, 0.0) + totalPorPasaje);

	    vuelo.reservarAsiento(nroAsiento);
	    if (!cliente.esPasajero()) {
	        cliente.convertirEnPasajero();
	    }
//	    System.out.println("codVuelo:    " + codVuelo);
	    cliente.setCodigoVuelo(codVuelo);

	    return nroAsiento;
	}


	@Override
	public List<String> consultarVuelosSimilares(String origen, String destino, String fecha) {
	    List<String> vuelosSimilares = new ArrayList<>();
	    SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
	    Date fechaConsulta;
	    try {
	        fechaConsulta = formatoFecha.parse(fecha);
	    } catch (ParseException e) {
	        throw new IllegalArgumentException("Formato de fecha inválido. Use 'dd/MM/yyyy'.");
	    }

	    Calendar cal = Calendar.getInstance();
	    cal.setTime(fechaConsulta);
	    cal.add(Calendar.DAY_OF_YEAR, 7);
	    Date fechaLimite = cal.getTime();

	    for (Vuelo vuelo : vuelos.values()) {
	        if (vuelo.getOrigen().equals(origen) && vuelo.getDestino().equals(destino)) {
	            Date fechaVuelo = vuelo.getFecha();
	            if (!fechaVuelo.before(fechaConsulta) && !fechaVuelo.after(fechaLimite)) {
	                vuelosSimilares.add(vuelo.getCodigo());
	            }
	        }
	    }

	    return vuelosSimilares;
	}


	@Override
	public void cancelarPasaje(int dni, String codVuelo, int nroAsiento) {
	    Vuelo vuelo = vuelos.get(codVuelo);
	    if (vuelo == null) {
	        throw new IllegalArgumentException("Código de vuelo no válido.");
	    }
	    
	    Cliente cliente = clientes.get(dni);
	    if (cliente == null || !cliente.esPasajero()) {
	        throw new IllegalArgumentException("El cliente no es un pasajero o no está registrado.");
	    }
	    vuelo.consultarAsientosDisponibles().add(nroAsiento);
	    System.out.println("Pasaje cancelado exitosamente.");
	}

	@Override
	public void cancelarPasaje(int dni, int codPasaje) {
		// TODO Auto-generated method stub
	}

	@Override
	public List<String> cancelarVuelo(String codVuelo) {
	    Vuelo vueloCancelado = vuelos.remove(codVuelo);
	    if (vueloCancelado == null) {
	        throw new IllegalArgumentException("Código de vuelo no válido.");
	    }

	    List<String> resultado = new ArrayList<>();
	    List<Cliente> pasajerosReprogramados = new ArrayList<>();
	    List<Cliente> pasajerosCancelados = new ArrayList<>();

	    for (Cliente cliente : clientes.values()) {
	        if (cliente.esPasajero() && cliente.getCodigoVuelo().equals(codVuelo)) {
	            boolean reprogramado = false;

	            for (Vuelo vuelo : vuelos.values()) {
	                if (vuelo.getDestino().equals(vueloCancelado.getDestino()) &&
	                    vuelo.consultarAsientosDisponibles().size() > 0) {
	                    vuelo.reservarAsiento(vuelo.consultarAsientosDisponibles().get(0));
	                    cliente.setCodigoVuelo(vuelo.getCodigo());
	                    System.out.println(cliente.getCodigoVuelo());
	                    pasajerosReprogramados.add(cliente);
	                    resultado.add(cliente.getDni() + " - " + cliente.getNombre() + " - " + cliente.getTelefono() + " - " + cliente.getCodigoVuelo());
	                    reprogramado = true;
	                    break;
	                }
	            }

	            if (!reprogramado) {
	                pasajerosCancelados.add(cliente);
	                resultado.add(cliente.getDni() + " - " + cliente.getNombre() + " - " + cliente.getTelefono() + " - CANCELADO");
	            }
	        }
	    }
//	    System.out.println("codVuelo:    " + codVuelo);
//	    System.out.println("resultado:    " + resultado);

	    return resultado;
	}


	@Override
	public double totalRecaudado(String destino) {
	    return recaudacionPorDestino.getOrDefault(destino, 0.0);
	}

	@Override
	public String detalleDeVuelo(String codVuelo) {
		Vuelo vuelo = vuelos.get(codVuelo);
	    if (vuelo == null) {
	        throw new IllegalArgumentException("Código de vuelo no válido.");
	    }
	    
	    String detalleBase = String.format("%s - %s - %s - %s", codVuelo, vuelo.getOrigen(), vuelo.getDestino(),
	            new SimpleDateFormat("dd/MM/yyyy").format(vuelo.getFecha()));

	    if (vuelo instanceof VueloNacional) {
	        return detalleBase + " - NACIONAL";
	    } else if (vuelo instanceof VueloInternacional) {
	        return detalleBase + " - INTERNACIONAL";
	    } else if (vuelo instanceof VueloPrivado) {
	        VueloPrivado vueloPrivado = (VueloPrivado) vuelo;
	        return detalleBase + String.format(" - PRIVADO (%d)", vueloPrivado.getJetsNecesarios());
	    }
	    
	    return detalleBase;
	}


}
